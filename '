# Confidentialité

# Remerciements

# Sommaire

# Introduction
Ce mémoire a pour but de présenter mes deux années d’alternance à Noz. Ce n’est pas un exposé chronologique des événements mais une revue thème par thème des expériences vécues pendant ces deux années.
Son objectif est d’aborder avec un regard critique 

# Présentation de l’entreprise

## L’environnement économique
Le marché du déstockage, est un marché qui existe depuis de nombreuses années. Beaucoup moins répandu qu’aujourd’hui, ce marché était très spécialisé, dirigé par des indépendants et essentiellement présent dans le domaine alimentaire. Les entreprises de fabrication proposent également leurs propres magasins d’usines afin de vendre les produits de second choix ou leurs surstocks.

C’est dans les années 1980, que ce marché se développe, et que nous voyons apparaître des magasins spécialisés dans le déstockage comme par exemple Stockomani, Noz.... Dans les années 2000, M. Granjon, révolutionne ce marché avec le lancement du déstockage et l’ouverture de son site internet spécialisé dans ce domaine. Le marché du déstockage est en pleine expansion aujourd’hui notamment depuis la crise en 2008, le nombre d’acteurs s’est multiplié en France, que ce soit en magasins physiques ou sur
la toile. Les entreprises ont bouleversé leur fonctionnement en minimisant les coûts et en vendant leurs surstocks, leurs seconds choix dans ces circuits. En 2014, le déstockage est toujours en croissance forte mais la perte et les destructions des marchandises en 2014 sont encore estimées à 630 millions d’euros en France.Le marché du déstockage, est un marché qui existe depuis de nombreuses années. Beaucoup moins répandu qu’aujourd’hui ce marché était très spécialisé, dirigé par des indépendants et essentiellement présent dans le domaine alimentaire. Les entreprises de fabrication proposent également leurs propres magasins d’usines afin de vendre les produits de second choix ou leurs surstocks.

C’est dans les années 1980, que ce marché se développe, et que nous voyons apparaître des magasins spécialisés dans le déstockage comme par exemple Stockomani, Noz.... Dans les années 2000, M. Granjon, révolutionne ce marché avec le lancement du déstockage et l’ouverture de son site internet spécialisé dans ce domaine.
Le marché du déstockage est en pleine expansion aujourd’hui notamment depuis la crise en 2008, le nombre d’acteurs s’est multiplié en France, que ce soit en magasins physiques ou sur la toile. Les entreprises ont bouleversé leur fonctionnement en minimisant les coûts et en vendant leurs surstocks, leurs seconds choix dans ces circuits. En 2014, le déstockage est toujours en croissance forte mais la perte et les destructions des marchandises en 2014 sont encore estimées à 630 millions d’euros en France.

L’élément économique primordial sur ce marché est le positionnement prix. La pérennité des entreprises de déstockage réside sur la capacité qu’elles ont à proposer un prix défiant toute concurrence. En moyenne, il est possible de constater une baisse de 50% par rapport aux circuits de vente habituels. Il y a un second élément indispensable, l’offre. Cette dernière dépend des opportunités qui se présentent auprès des fournisseurs.
Alors que nous nous trouvons dans un contexte économique difficile, l’entreprise NOZ devient plus forte année après année grâce à sa volonté de rester centrée sur son métier de base qui est le déstockage pur et dur. De plus, le pouvoir d’achat qui ne cesse de baisser est un sujet qui préoccupe le gouvernement. C’est dans cet état d’esprit que nous avons vu la clientèle de NOZ se diversifier. 
Autres éléments, non négligeable, dans ce contexte économique, les fournisseurs potentiels cherchent actuellement de plus en plus à limiter leurs stocks car cela leur coûte cher.

## L’environnement stratégique
Certains acteurs du marché peuvent voir leurs systèmes économiques plus faibles car leur pouvoir de négociation est moindre. Pour éviter cela, NOZ a choisi de développer un vaste réseau de magasins afin de pouvoir négocier de grandes quantités auprès de ses fournisseurs et, par conséquent, tirer ses prix vers le bas.
D’autre part, la force de l’entreprise NOZ est de ne pas faire de PUB nommant les fournisseurs. Dernier point, les produits restent en magasin pour une durée déterminée. Par conséquent, l’entreprise ne fausse pas le marché du fournisseur.

## L’environnement concurrentiel
Le marché du déstockage est aujourd’hui composé d’une multitude d’acteurs, souvent locaux ou régionaux. NOZ fait toujours figure de précurseur et de leader au niveau européen.
Pour se démarquer de ses concurrents qui n’ont cessé d’augmenter ces dernières années, NOZ a choisi de conserver son concept d’origine : généraliste à dominance non alimentaire, sans marchandising particulier (un produit = un prix). De plus, NOZ a réussi à développer un réseau important de magasins lui assurant une présence quasi nationale. Cette volonté d’extension constitue toujours un axe de développement pour l’entreprise.
D’autres concurrents, comme « Stockomani » par exemple, choisissent un développement autour de linéaires, comme ceux que l’on retrouve dans les grandes surfaces et la création de MDD pour fidéliser leurs clients. L’ensemble des autres concurrents restent marginaux à leur échelle et ne disposent pas forcément d’une force nationale comme NOZ peut le prétendre.

## L’univers NOZ
Le premier magasin a ouvert ses portes en 1976 à Laval. Actuellement, le réseau en pleine expansion, compte plus de 260 magasins à travers la France ainsi que 8 plateformes (Entrepôt où les marchandises sont réceptionnées des fournisseurs puis réparties vers les magasins). Le chiffre d’affaires dépasse les 409 millions d’euros pour l’année 2013.
Le concept de l’entreprise est novateur et très peu répandu. Il s’agit d’acheter les surstocks et les invendus des industriels et fournisseurs, qu’ils proviennent de la France ou du reste du monde, pour ensuite les écouler dans les différents magasins. C’est par ce concept que l’entreprise NOZ est reconnue comme leader européen du déstockage.

## Le métier NOZ et son flux
Le métier de NOZ commence à la détection d’une affaire. Une affaire est un lot achetable. Un lot d’invendus, de sinistré ou de surstock. L’affaire est enregistrée dans le système informatique de NOZ par les commerciaux. Elle est ensuite traitée par le service marketing qui va, entre autres, déterminer un prix taquet. Le prix taquet est le prix maximum au dessus duquel les commerciaux ne pourront pas monter pendant la négociation de l’achat.
Dans le cas d’affaire réussie (c’est-à-dire avec entente sur le prix et avec achat conclu), la marchandise achetée est acheminée dans une des 8 plateformes logistiques. Une fois la marchandise arrivée, plusieurs équipes s’affairent à déballer et à trier les biens reçus. Les différents articles sont ensuite dispatchés vers les magasins ou mis de coté pour une mise en vente ultérieure. Les articles sont répartis dans le plus de magasins possibles, à ceci près que certains sont préférés à d’autres pour certains genres d’articles (les skis, par exemple, sont plutôt mis en vente dans les régions proches de la montagne).
Les magasins sont approvisionnés trois fois par semaine par les plateformes. Après un certain temps passé en magasin (généralement de l’ordre de 6 semaines), un article qui n’a pas été vendu passe en *accélération* : sont prix baisse radicalement avant d’être retiré du magasin. L’accélération dure générélement une semaiane. Les articles qui n’ont pas été vendu sont récupérés par la société *France Invendus* de NOZ. Elle s’occupe enuite de les revendre par (gros) lots à pris encore plus cassés.

## L’informatique chez Noz
Cette section vise à présenter le service informatique de NOZ et quels furent les rôles que j’ai pu jouer au sein de celui-ci. Du fait de l’organisation de l’univers NOZ, il existe un certain cloisonnement entre les différent services. Un des objectifs de ces séparation est de s’assurer que chaque services se concentre sur son cœur de métier. Quoi qu’il en soit, une des conséquence de cela est que le service informatique a un fonctionnement qui tend vers celui d’une SSII (ESN). Dans la suite de cette présentation, ce qui sera appelé le *client* ne sera rien d’autre que le reste de l’univers NOZ.

### Les différents services et logiciels
Le service informatique chez Noz est organisé en deux grands pôles : le étude et le pôle exploitation. Le pôle exploitation a pour tâche de s'assurer de la continuité du bon fonctionnement des infrastructures informatiques. Il gère la distribution du matériel, l'administration des serveurs, du réseau, de la sécurité. Il assure également le support de toutes ces fonctionnalités par téléphone via une équipe située en Roumanie. Il s'occupe de toute la partie hardware. Le pôle étude, quant à lui, s'occupe de la partie logicielle.
Il chiffre, planifie et développe les créations et évolutions des transactions sur les progiciels utilisés dans l'entreprise. Les principaux progiciels utilisés sont Selligent − CRM, Cognos − Décisionnel − et SAP − ERP. Le pôle est divisé en sous-sections : une sous-section nédiée par progiciel. Il y a également un pôle Web, qui s'occupe de développer des outils spécifiques qui ne peuvent pas être réalisés avec les autres progiciels. Chaque pôle dispose d'une contrepartie en Roumanie et est composé de 3 à 6 personne.
Le pôle le plus important en terme de taille est le pôle SAP. Il comporte un peu plus d’une vingtaine de personnes. Il est subdivisé en trois parties : Chefs de projet, Développeurs, Support. Le pôle support procure une assistance à tout l’univers noz pour l’utilisation de SAP et de ses transactions spécifiques au flux NOZ. C’est la première ligne pour la résolution de problèmes et le repport d’anomalies. Les deux groupes Chefs de projet et Dévoloppeurs, eux, s’occupent de toute la maintenance logicelle et du développement d’évolutions et de nouvelles fonctionnalités. C’est au sein du pôle SAP que j’ai effectué mes deux années d’alternance. L’organisation du pôle SAP en plusieurs sous-parties est calquée sur la manière dont sont gérés les projets. Nous expliquerons dans un instant la gestion des projet SAP. Avant cela, il convient d’expliquer brièvement en quoi il consiste.

### SAP
Cette section a pour but de présenter le l’ERP SAP, sur lequel j’ai réalisé la quasi-totalité de mes missions. Notre objectif est d’en donner une description aussi large que possible, en ne rentrant dans les détails que lorsque cela s’avèrera vraiament nécessaire. Nous ne présenterons que les concepts nécessaires à la compréhension du reste du document.

#### Introduction générale
SAP est un ERP, un progiciel de gestion intégré. Un ERP est un progiciel dont le but est de réunir les fonctions principales de l’entreprise (comptabilité, production, approvisionnement, etc.) au sein d’un seul et unique système d’information. L’intérêt de tout relier ainsi est de pouvoir connaître en temps réel les conséquences qu’auront une décision (une commande de matière première, un recrutement) sur le reste de l’entreprise.
SAP a pour objectif d’être le plus génériques possible. Il propose en outre plusieurs moyens pour s’adapter précisément au fonctionnement des entreprises.
* En premier lieu, SAP se décline sous forme de modules. Un premier niveau d’adaptation se fait donc par le choix des modules.
* Un second niveau d’adaptation est franchi par la configuration de SAP en fonction des besoins de l’entreprise : définition des modéles de facture, des centres de coût, etc.
* Enfin, il est possible de développer et d’améliorer des programmes au sein même de SAP. Ce troisième niveau est le plus puissant et aussi le plus coûteux et terme de travail.
On appelle le *standard SAP* toutes les fonctionnalités qui sont disponibles et utilisable qu’en configurant SAP. Des fonctionnalités sont dites *spécifiques* lorsqu’il est nécessaire de réaliser de nouveaux développements pour les obtenir.
De manière générale, il est préférable pour les entreprises de rester au plus près du standard SAP, c’est à dire de ne le personnaliser que par la configuration, sans passer par de nouveaux développments. Cela n’est en revanche pas toujours possible. Certaines entreprises, comme NOZ, ont un fonctionnement si parciculier par rapport aux autres entreprises, qu’il est inévitable de passer par le développement de nouvelles transactions dites “spécifiques”. Une quantité importante des fonctionnalités SAP utilisées par NOZ sont des fonctionnalités spécifiques.

#### Les transactions
SAP fonctionne suivant un modèle client-serveur rapellant un peu les anciens systèmes mainframes. Chaque poste client se connecte au serveur (le Web Application Server) mais ne réalise en réalité quasiment aucun travail. Le programme tournant sur le poste client n’est, à peu de choses près, qu’une interface graphique pour interroger le serveur. Tout le travail de traitement et de recherche en base de donnée est réalisé par le programme serveur.
Ces traitements sont regroupés dans des programmes et ces programmes sont appelés par des transactions. Les transactions ne sont rien d’autre que des alias, des noms de fonctionnalité, que le serveur propose. Leur role est très proche de l’url d’une page Web sur internet. Le serveur SAP (serveur http) propose des transactions (des pages) que le client SAP (nagiguateur internet) va aller requêter. Le seul travail que réalise le poste client est de l’ordre du visuel et de la capture d’évennement (appuis sur un bouton, etc.).
TODO: Schéma expicatif
Les transactions sont le seul point de contact avec SAP pour le client final. Une grande partie du travail de développeur SAP a lieu dans la création et dans la mise en place de transactions.

#### L’ABAP
L’ABAP est *le* langage pour développer des transactions sous SAP. Il est décrit comme un héritier du Cobol (utilisé pour développer sur l’AS400). Il a été bâti autour de l’idée qu’un langage informatique était plus facile à comprendre et à apréhender lorsque des mots étaient utilisés au lieu de symboles pour les oprations de base. Le résultat est quelque chose de visuellement proche d’un SQL dont on aurait étendu les fonctionnalités. L’analogie avec le SQL est également quelque chose qui était recherché dans la conception du langage : l’ABAP devait servir à construire des transations simples de reporting et de mise à jour sur *des tables en base de données*. Il fallait donc que ces opérations fussent les plus aisées possibles.
Dans les faits, l’ABAP est 1/ Difficile à apréhender pour le débutant, du fait de la difficulté à trouver de la documentation (rapellons que c’est une technologie privée) et du fait des concepts parfois tordus qu’il utilise, et 2/ Pénible à utiliser pour le développeur venant d’autres technologies à cause de sa monstrueuse vebosité et des contraintes de nommages sévères qu’il impose. Notons aussi qu’il n’y pas à ce jour d’IDE digne de ce nom. Il existe une extension pour Eclipse mais il reste encore du chemin à parcourir.
L’ABAP a en revanche plusieurs avantages. À noter :
* Une excellente intégration dans SAP. L’ABAP est imédiatement conscient des changements qui ont lieux dans les tables. Tout est situé sur le serveur, il n’y a presque jamais de probléme de synchronisation de version.
* Bien que parfois étrangement implémentées, l’ABAP propose une quantité importante de fonctionnalité. Certains concepts objets sont maintenant implémentés, on peut exposer des modules fonction sous forme de web-services, on peut exposer les transactions sous forme de pages web, etc.
* De nombreux “points d’amélioration” sont disponibles dans les transactions standards pour venir y brancher un morceau de code spécifique.
* Tout dans SAP écrit en ABAP. Il est donc possible de TOUT débuger. On peut aller voir dans le code source d’absolument n’importe quoi. Ceci permet, en principe, de vérifier les implications pour le système de n’importe quelle action de l’utilisateur dans son utilisation de tous les jours. Nous reviendrons sur ce point.
Nous reviendrons à plusieurs reprises sur l’ABAP dans la seconde partie de ce mémoire.

#### Les environnements et la gestion des versions
Comme tout environnement de développement qui se respecte, SAP propose deux fonctionnalités essentielles :
* Différents environnements : il est possible d’avoir plusieurs instances de SAP qui tournent en parallèle. Une seule de ces instance sert généralement en production. Les autres servent à faire des tests et à développer de nouvelles fonctionnalités sans risquer d’endommager la production. Chez NOZ, trois instances sont utilisées : DEV, pour le développement, QAS, dont les données sont aussi proches que possible de la production, pour faire des tests de recette et reproduire des bugs, et enfin PRD, la production, sur laquelle les utilisateurs se connectent et réalisent lers caches productives.
* Gestion des versions : lorsgu’un programme, une table ou (presque) n’importe quelle entité SAP est modifiée, la version précédente est gardée en mémoire et il est possible de s’en servir comme base de comparaison ou de la rapeller en cas de problème.
Les entités SAP, à travers leurs versions, sont transportées d’environnement en environnement. Par exemple, un programme est développé et testé par l’équipe de développement dans l’instance DEV, il est ensuite transporté en QAS où il est testé par le chef de projet. Il est enfin transporté en PRD où il peut commencer à être productif. C’est un cycle obligatoire : il ne faut pas créer de nouvelles entités directement dans un environnement “supérieur”. C’est un gage de qualité pour deux raison :
* C’est l’assurance qu’un programme arrivé en production a été dûement testé
* C’est l’assurance que les entités fondamentales de production sont les mêmes que dans l’environnement de développement. Ceci permet à l’équipe de développement d’être (quasi) assurée qu’un programme qui fonctionne en DEV fonctionnera en PRD, et qu’un bug en PRD sera (quasi) nécessainement reproduisible en environnement de développement (les données mises à part).

### La gestion des projets SAP
*Je parlerai ici de la gesion des projets dans le service informatique en me centrant exclusivement sur la perspective SAP. Les autres progiciels seront significativement mis à l’écart, n’ayant que trop peu travaillé avec. Cela ne devrait toutefois pas créer de confusion : les aspects que je traiterai seront suffisament transverses à tout le service informatique.*
Cette partie décrit en détail le cycle de vie des demandes informatique. Elle sert à la fois à poser le contexte pour le reste du document et pourrait presque servir de sommaires pour de nombreux thèmes que nous traiterons ensuite.
Le service informatique fait face à deux types de demandes : les demandes formalisées et les demandes “urgentes” de maintenance (Toutes les demands sont urgentes, mais les demandes de maintenance le sont *particulièrement*). Je parlerai en premier des demandes formalisées. Je reviendrai sur les demandes de maintenance ensuite. 

#### Les demandes formalisées
La réalisation des projet suit *grosso modo* un cycle en V. Nous allons cependant détailler les quelques aspects et points de terminologie qui diffèrent.

##### Étude de faisabilité
Tout projet réalisé par le service informatique commence par une demande dans l’outil de suivi. Il s’agit d’un outil web développé par le service informatique lui-même pour ses besoins. Il propose des fonctionnalités similaires à des outils comme Jira ou Redmine. Chaque client dispose d’un compte sur l’outil et peut s’y connecter pour déposer une nouvelle demande.
Chaque demande fait l’objet d’une étude de faisabilité. Sont examinés :
* Les besoins réels (autant que possible), pour éviter que le client ne “saute” vers une demande de solution ne correspondant pas vraiment à son besoin.
* Les nécessités d’interopérabilité avec les autres logiciels. En effet certaines demandes nécessitent d’interragir avec d’autres composants logiciels. Si parfois ces interactions sont gérés de manière native par les logiciels et sont ainsi aisées à réaliser, parfois il peut s’agir de contraintes surprise particulières lourdes.
* La cohérence de la demande avec le reste des flux NOZ. Certains projets împortant impliquent plusieurs services et il est donc important que ces services soient synchrones entre-eux. Du fait du cloisonnement dont nous parlions plus haut, ce n’est pas toujours le cas, et il arrive parfois qu’une demande n’aille pas tout à fait dans le sens des autres services. Il imcombe par défaut au service informatique de s’assurer de cette cohérence inter-service au niveau de la demande, sous peine d’avoir à retravailler (ou même annuler) des parties parfois très conséquentes de solutions livrées.
Plusieurs aller-retours sont parfois nécessaires pour arriver à une formulation du besoin qui convienne à la fois au client et au service informatique. L’aide à la formulation du besoin et l’amélioration de la communication avec le client est un des axes actuel d’amélioration actuel du service informatique.
Après que la faisabilité de la demande ait été étudiée, un chiffrage et une date de livraison sont estimées. Il y a un premier retour au client et il est ensuite décidé du lancement de la réalisation de la demande.

##### Conception
Une fois le *go* d’une demande décidé, le travail des chefs de projet commence. Il faut noter que, malgré leur titre, les chefs de projet ont aussi un rôle de concepteur et d’analiste. Une de leur principale force réside dans leur connaissance approfondie de leur domaine (finance, logistique, etc.) et de la manière dont ils sont mis en œuvre au sein de l’univers NOZ. Leur tâche à ce stade de la demande consiste à écrire les spécifications fonctionnelles de la demande en fonction du besoin exprimé. Les enjeux à ce stade de la demande sont principalement de l’ordre de l’étude d’impact sur l’existant. L’ensembles des transactions dédiées au métier NOZ commence en effet à être volumineux et, ajouté à la complexité inhérente à SAP, rend l’ajout de nouvelles fonctionnalités de plus en plus compliqué. Un travail particulières est donc réalisé pour faire en sorte que la demande soit implémenté sans nuire à la stabilité de l’ensemble du système actuel. Les problématiques rencontrées à ce stade concernent des questions comme :
* Est-il vraiment nécessaire de réaliser des développements spécifique, ou est-il possible de prendre du standard SAP et de le configurer pour coller au besoin ?
* Faut-il créer une nouvelle transaction ou en étendre une autre ?
* Faut-il créer une nouvelle table ?
* Faut-il relier deux tables ou dupliquer des données ?
Ces question tranchées, un cahier de spécifications fonctionnelles est rédigé. Il convient de noter que, à nouveau, de nombreux échanges avec le client sont également nécessaires pendant cette étape. Une fois cette étape terminée, les grosses décisions de conceptions ont normalement été prises. C’est maintenant au tour du développeur.

##### Réalisation
C’est à cette étape que j’ai réalisé la quasi-totalité de mes missions pendant mon alternance. C’est pendant cette étape que la solution de la demande est effectivement construite. Le cahier de spécifications fonctionnelles est fourni au développeur et il lui incombe de construire :
* Un cahier de spécifications techniques
* Des fiches de tests unitaires
* Un programme (ou des modifications sur l’existant) fonctionnel
Idéalement, les spécifications fonctionnelles sont suffisament souples pour laisser au développeur la plupart des choix d’implémentation. C’est pendant cette étape que la plupart de mes missions se sont déroulées. Nous reviondrons très en détail sur cette étape dans la seconde partie de ce mémoire. Pour l’instant, gardons à l’esprit qu’un logiciel fonctionnel doit être fourni à la fin de celle-ci.

##### Recette
C’est l’étape finale de la réalisation d’une solution. Elle est divisée en deux parties :
* Recette informatique
* Recette utilisateur
L’objecif principal de la recette informatique est de s’assurer que l’utilisateur ne voit (autant que possible) qu’une version fonctionnelle de la solution. C’est aussi de mettre en exergue des bugs ou des anomalies de conception qui n’auraient pas été détectées plus haut.
Il arrive qu’un livrable en première version soit recallé par le chefs de projet. Un premier prototype met en effet souvent en lumière des choses auxquelles ont n’aurait pu penser en premier lieu, lors de la rédaction du document fonctionnels. Dans ces cas il y a correction ou complétion des documents fonctionnels et de nouveaux développements sont effecué pour finaliser la solution.
La recette utilisateur arrive ensuite. Elle est idéalement ultime. Elle est là pour s’assurer que la solution est fonctionnelle *end to end*. Malheureusement, dans les faits, il arrive parfois que certains points du besoin soient revus à ce moment là. Il ne s’agit pas nécessairement d’omissions dues à des négligences mais tout simplement du fait qu’un produit fini offre beaucoup plus de vision sur son besoin qu’un simple cahier des charges.
Il incombe alors au chef de projet de discerner entres les écarts réels entre la solution et le besoin qui était exprimé au début et les remarques qui relèvent plus de futures évolutions et nouvelles fonctionnalités.
Une demande validée en recette est considérée comme close. Toutes les tâches suivantes la concernant sont de l’ordre de la maintenance et ne sont plus directement gérées par l’outil Web de gestion des demandes.

#### Les demandes non formalisées
Toutes les tâches de maintenance suffisament légères ou urgentes sont généralement assez peu formalisées. Une adresse mail est dédiée pour traiter ces demandes. Si il s’agit d’un *single point of contact* avec le pôle technique SAP, cette adresse n’est en réalité pas diffusée directement auprès du client. Ce sont les chefs de projet et le support qui communiquent principalement dessus.
Si les demandes en elles-même sont informelles, la manière d’y répondre doit toutefois respecter autant que possible les règles de fonctionnement du développement. Tous les documents concernés doivent être modifiés en conséquence et une recette partielle relative à la demande doit être effectuée.
L’adresse mail et, plus généralement la manière dont sont traitées les petites demandes informelle, est un reliquat de la façon dont étaient traitées les demandes aux débuts du département informatique de NOZ. Il s’agit d’une façon de faire dont le pôle étude s’éloigne petit à petit. Cela reste toutefois un bon moyen de traiter les demandes où une formalisation complète représenterait un investissement aux retours trop incertains. Dans les faits, on est assez proche de la manière dont seraient gérées des tâches dans un contexte agile (en particulier Scrum). Le mail de la demande sert souvent de point de départ à des échanges entre client, chef de projet et développeur. L’historique des mails peut ensuite servir de référence future.

## Conclusion
En raison de la croissance rapide de l’entreprise, le pôle étude de l’univers NOZ en phase d’évolution accélérée depuis plusieurs années. La gestion de projet de ses débuts s’est vite trouvée incapable de gérer les demandes croissantes en complexité. Il a donc du s’adapter au fur et à mesure qu’il grandissait, tout en continuant à traiter les nouvelles demandes.
L’organisation résultante (qui correspond à ce que l’on a expliqué plus haut) en est actuellement à un stade où elle peut gérer de manière structurée les nouvelles demandes. Les livrables sont soumis à un certain contrôle, une documentation technique est rédigée et une trace de l’expression des besoins formalisée est conservée.
Les principaux difficultés auxquelles le pôle étude doit faire face sont :
* continuer à développer de nouvelles fonctionnalités en faisant évoluer et en restant consistant avec les anciennes (sans régressions)
* des changements de collaborateurs assez réguliers et une gestion d’équipe à l’international
* le développement de projets d’envergure trop peu suffisament exprimés et impliquant de nombreux domaines métier de l’univers

Nous allons maintenant passer à la seconde partie de ce mémoire, qui se focalise sur mes missions et les difficultés que j’ai pu rencontrer.

# Missions
Nous allons dans cette partie passer en revue certaines de mes missions. L’objectif n’est pas de rentrer dans les détails de la réalisation mais de se concentrer sur les problématiques et sur les solutions apportées en terme de méthodologie de travail. Chaque section commencera par une brève présentation du contexte et sera suivi par plusieurs remarques et commentaires rétrospectives.

## Introduction
Mon arrivée à l’univers NOZ a commencé par une semaine de formation au langage ABAP. Comme nous l’avons vu plus haut, l’ABAP est le langage utilisé pour développer de nouvelles fonctionnalités spécifiques sur SAP. C’est à travers lui que je devais ensuite développer pour l’univers NOZ pour deux ans.

## Résumé des missions

### Développement : programme de création de magasin

#### Besoin et résumé de la solution
Le premier développement conséquent que j’ai réalisé pour NOZ fut une transaction pour l’équipe support du pôle SAP. Il s’agissait d’une transaction pour automatiser plusieurs tâches qui doivent être effectuées lors de l’ouverture d’un nouveau magasin. NOZ ouvre plus d’un magasin par mois, il s’agissait donc de tâches à réaliser fréquemment. Le pôle support avait pas moins d’une vingtaine d’opérations à effectuer, opérations qui consistaient à :
* Créer les données de base en copiant un magasin de référence
* Créer les données dépendantes dans d’autres tables
* Relier les entrées de tables
* Ajouter des entrées dans la configuration de SAP

La transaction terminée a permis de réaliser toutes ces tâches d’une seule traite et automatiquement. Elle créait également un *ordre de transport* et y mettait toutes les nouvelles données. Un ordre de transport est comme un paquet dans lequel on met des données que l’on désire transporter vers un autre environnement : QAS et PRD. Les données des magasins étaient donc crées en DEV et ensuite transportées vers la production. On était ainsi certain d’avoir cohérence des données entre l’environnement de développement et la production.

#### Détermination du besoin
Cette tâche fut parciculière en terme de besoin. Celui-ci était parfaitement clair sans qu’il y ait jamais eu de cahier des charge de rédigé. Le point de départ était en effet la procédure à suivre, du point du vue de l’utilisateur support, pour réaliser toutes les tâches de création de magasin.
La tâche ne se fut cependant pas sans difficulté. La procédure était en effet rédigée avec des termes fortement ancré dans le métier. Si celle-ci restait exécutable par quelqu’un ne le connaissant pas ou presque, il restait du travail à faire pour comprendre ce *qu’impliquaient* chacunes des opérations.
Cette compréhension du “fond” des opérations était absolument nécessaire. En effet dans cette mission, et en réalité dans la quasi-totalité des missions de développement que j’ai eu à réaliser, le cheminement de réflexion à suivre était approximativement celui-ci : comprendre ce qu’impliquaient les actions de l’utilisateur et chercher comment réaliser ces mêmes action avec uniquement du code. Il était donc nécessaire de comprendre les actions réalisées en terme métiers pour ensuite les traduire en actions systèmes, pour enfin réaliser ces actions système d’une autre manière, automatique.
Pour cela la voie royale est le contact direct avec le demandeur. Sans la proximité et l’implication du pôle support il n’aurait probablement pas été possible de cerner les implications de la fonctionnalité demandée. En tout cas pas aussi justement.
Cette demande était une demande qui était en attente depuis un certain temps. L’autre moyen pour apréhender les objectifs de celle-ci était donc par le biais du début de documentation laissé par le développeur précédent.

#### Gestion de la documentation
Ces lorsqu’on en a besoin qu’on comprend l’importance de la documentation. Cette mission fut un cas où le peu de documentation disponible fut salvateur. Cette mission fut la première à réaliser sans spécification technique de fournie. Dans le workflow de développement SAP de NOZ, les spécifications techniques sont supposées contenir tous les éléments importants à utiliser dans le programme. Il s’agit généralement de modules fonction ou de tables. Bien que systématiquement demandées, leur but restait , avant cette mission, quelque peu flou. Que faut-il documenter pour que ce soit *utile* ?
* Comment documenter un algorithme sans être redondant avec le code écrit ? En effet, il est inucile de répéter dans un document Word ce qui est déjà écrit dans le code du programme. Le pseudo-code présente des avantages pour apprendre l’algorithmie ou pour écrire des algorithmes qui ne sont pas dépendant d’un langage ; mais il est absolument impuissant à *expliquer* un algo. Qui comprend un langage comprend de la même manière du pseudo-code qui exprime la même chose. Il n’y a pas de gain, juste un travail doublé.
* Comment documenter sans être redondant avec les commantaires écrits dans le code source ? De la même manière que pour le pseudo-code, quiconque comprend des commentaires dans le code comprendra aussi bien les mêmes idées exprimées dans un document Word sans rien gagner de plus. Inutile donc de doubler le travail à effectur pour ne bénéficier d’aucun gain.
* Comment documenter sans se contenter de reformuler les spécifications fonctionnelles ? Convertir une spécification fonctionnelle en *jargon* technique n’a aucun intérêt. Exprimer les mêmes idées avec des mots différents ne fait gagner de temps à personne. Les idées exprimées par une spécification technique doivent donc être fondamentalement différentes de celles de la spécification fonctionnelle.
Quelles sont les choses que doit exprimer la documentation technique qui ne sont ni dans le code, ni dans les commentaires du code, ni dans la spécifications fonctionnelles ?

La problématique la plus bloquante, et celle qui fut la plus chronophage à résoudre, fut de trouver quels modules fonction utiliser et *comment* les utiliser. En effet, comme nous l’avons vu plus haut, une grande partie du travail de développeur consiste à automatiser des tâches à partir d’une description de celles-ci du point de vue de l’utilisateur. Il se trouve que la quasi-totalit des transactions SAP ont une contrepartie “programmable” : les modules fonctions. Il fallait donc trouver ceux qui correspondaient à la demande et s’assurer *qu’ils fassent bien ce que l’ont voulait*. En effet, SAP souffre sévèrement du syndrome de nommage cryptique : de nombreux éléménts ont un nom qui n’indique que très peu de choses sur ce qu’ils sont ou ce qu’ils font. Nous reviendrons sur ce point plus tard. En plus de cela, les modules fonction sont documentés de la manière la plus succinte possible. Il était donc particulièrement ardu de trouver *le* module fonction qui allait bien au milieu du labyrinthe qu’est SAP. Ceci ne se fit que par beaucoup de veille sur internet et par d’intenses sessions d’essais-erreurs.

Une fois trouvés les modules fonction et les tables à utiliser, il paru évident qu’il s’agissait d’informations à conserver impérativement : si moi-même ou un autre développeur avait à retourner dans programme, il aurait toute une session de pêche à l’information dont il pourrait se dispenser, et ainsi une grosse perte de temps évitée. Les objectifs de la documentation techniques devinrent clairs à ce moment-là. Une documentation technique idéale doit contenir les informations techniques essentielles *qui ne sont pas à portée de main*.

#### Conclusion
Ce développement fut intéressant en fin de compte mais très décourageant à ses débuts. La découverte de la rareté des informations fournies par SAP à propos de ses propres fonctionnalités fut ahurissante. De plus, si dans la majorité des technologies *mainstream*, Google arrive à fournir 50% des réponses aux questions que l’on se pose, ce n’est pas du tout le cas dans le montde SAP. Il y a bien quelques sites qui répertorient un peu de documentation mais elle est généralement extraite automatiquement du code source du module fonction et n’apporte rien du plus puisque l’on a déjà le module fonction sous les yeux ... La meilleure manière de se documenter reste en fin de compte la documentation officielle de SAP, lorsqu’elle est diponible. Si elle n’est pas fournie, l’aide d’un membre de l’équipe est la chose la plus précieuse. Malheureusement, l’éventail de fonctions de SAP est absolument gigantesque et il n’est pas rare de se retrouver face à des problèmes que l’on est le premier à rencontrer au sein de l’équipe. C’est là que la documentation technique peut-être salvatrice. C’est lorsqu’on sort victorieux d’un intense session de recherche et d’essais-erreurs que l’on sait que l’on a des choses à écrire dans la documentation technique.

### Développement : workflow comptable

#### Besoin et résumé de la solution
Un des développement qui a occupé un temps important et qui s’est réparti la quasi totalité de ma période d’alternance fut sur la gestion du workflow comptable. Le workflow comptable consistait en un ensemble de transactions dont l’objectif était de gérer l’intégration, l’historisation et l’archivage de pièces comptables papier dans SAP (factures et coordonées bancaires). Les fonctionnalités principales sont :
* Ajouts des scans des pièces papier (factures et CB)
* Intégration manuelle des données dans SAP. La transaction indique un listing des pièces nouvellement scannées et fourni des racourci vers d’autres transactions comptables dans lesquelles l’utilisateur peut entrer les données portées par la pièce paper scannée. La transaction est organisée par onglets : plus une pièce est intégrée dans SAP, plus elle avance dans le flux (dans le workflow)
* Passage de pièces en archive
* Consultation de l’historique des pièces
* Reporting et statistique sur les pièces comptables. Ce n’est pas un reporting sur les pieces elles-mêmes, mais sur les pièces au sein du workflow : combien de temps une pièce de tel type met à être intégrée par les utilisateurs, quels types de piêce mettent du temps à être validé, etc.

Ci-dessous un diagrame pour donner une vue d’ensemble du fonctionnement :
TODO

#### Gestion du temps

#### Communication avec le client
Ce projet est probablement celui où j’ai été le plus prolifique ... en questions. La comptabilité n’est en effet absolument pas mon point fort et les spécifications fonctionnelles elles-mêmes étaient particulièrement difficiles à cerner. Il fallait donc, en plus de savoir ce que voulait le client, savoir *pourquoi* il la voulait.

Comme nous l’avons dis plus haut, le pôle étude est en train de mettre en place un système de gestion et de suivi de projet centralisé. Le modéle envisagé est très proche d’un cycle en V. Ou en cascade. Dans tous les cas c’est un cycle de vie en *one shot* (un cycle unique). Si le logiciel peut faire l’objet de plusieurs demandes et peut donc évoluer de manière presque itérative, chaque demande ne vit qu’une seule fois. Nous avons également dit que cette manière de faire était envisagée pour toutes les demandes future mais qu’elle peinait encore à s’imposer partout. Cette tâche fut une bonne occurence pour comprendre pourquoi.

Examinons certains des avantages d’un modèle à cycle unique :
1. La qualité d’une étape garantie la qualité des étapes suivantes
2. Les surprises sont limitées : on sait, *a priori* dans quoi est-ce que l’on s’engage
3. On sait (à peu près) pour combien de temps on s’engage
4. On sait (à peu près) la quantité de ressource que l’on va consommer
5. Les deux parties (Œuvre et ouvrage) sont contractuellement protégées

Le point 1. est l’un des plus intéressant. Le cycle et V et en cascade découlent des entreprises du BTP et de la manufacture. C’est en raison du point 1. qu’elles ont eu autant de succès dans ces domaines. Chaque étape entraine une consommation très lourde de ressources matérielles, il est donc nécessaire d’anticiper autant que faire se peut, sur “papier” (c’est-à-dire de n’importe quelle manière qui n’engage pas de ressource matérielle). Il est important d’anticiéer lorsque l’on engage beaucoup de ressources par la suite.
Les points 2, 3 et 4 sont plus discutables. En effet, est-ce la méthodologie et le formalisme qui permettent cela, ou sont-ce les compétences et l’expérience de membres de l’équipe qui en sont responsables ?
Le point 5. est également un point important pour toutes les sociétés de service et pour toutes les entités rendant service tout en restant assez indépendantes. Chez NOZ, le cloisonnement recherché entre les différents service fait que “protection” contractuelle est également désirable.
Ces points sont en revanche assombris par un gros inconvénient des cycles sans itération : l’effet tunnel. Ils présupposent, pour fonctionner, qu’il est possible de spécifier parfaitement (ou presque) un produit fini à partir d’une expression claire. On spécifie, on fabrique et on livre. Le problème est que la phase de fabrication est potentiellement longue et que, même en supposant que le besoin fut parfaitement compris dès le début, il est tout à fait probable qu’il ait changé entre temps. L’effet tunnel c’est toute la partie obscure (du point de vue du client) qui a lieu lors de la fabrication. C’est le passage sans transition de la partie “spécifié sur papier” à “produit fini”. Le problèmes de l’effet tunnel sont, évidemment, que le produit fini ne correspond généralement pas au besoin.
L’effet tunnel est un problème dans la construction mais reste secondaire : s’apercevoir d’une erreur en mi-parcours plutôt qu’à la fin ne sera salvateur que dans certains cas. Dans la majorité des situation le retour en arrière est plus coûteux que de continuer en gardant le défaut. Dit autrement, dans la constuction on ne gangne pas grand chose lorsqu’on résoud l’effet tunnel. Ce n’est pas l’effet tunnel qui pose le plus gros problème dans la contruction et la manufacture, c’est l’irréversibilité de l’investissement des ressources et le coût du retour en arrière.
Dans le domaine du logiciel on se trouve face à plusieurs différences :
* On peut développer par morceau et avoir des fonctionnalités non terminées mais quand même testables
* Les ressources investies ne sont pas nécessairement perdues
* Le retour en arrière n’est pas nécessairement coûteux. Certaines méthodologies comme l’XP recommandent même de ne pas avoir peur de suppimer du code
Pour la première raison, éviter l’effet tunnel est possible, pour les deux dernières c’est souhaitable.

#### Conclusion
La participation au développement du logiciel de suivi du workflow comptable fut une des expériences les plus intéressantes de mon alternance. Au delà du professionnalisme et de la bonne humeur des personnes avec qui s’est déroulé ce projet, ce fut aussi grâce à la sensation de contribuer réellement à quelque chose qui a perduré dans le temps. En effet, mes premières interventions sur le WF ont commencées dès le 6e mois et ont durées jusqu’à l’avant-dernière semaine de mon alternance (un peu à la manière d’un fil rouge).
Sur le plan technique, ce projet m’a permis de bien saisir l’importance fondamentale qu’ont le contact et les retours clients. C’était d’autant plus valable ici car le contact régulier était à la fois présent et *indispensable*, le domaine du projet n’étant absolument pas mon point fort.

### Développement : Extractions de données France Invendus pour Cognos

#### Besoin et résumé de la solution
France Invendus (FI) est la société qui s’occupe de revendre (par gros lots) les produits qui n’ont pas été vendus en magasin. Les offres et des commandes FI sont gérées par SAP mais elles contiennent des données différentes des commandes et des offres “normales”. Le pôle décisionnel avait besoin d’avoir à disposition ces données pour des reporting et des statistiques. Il fallait donc réaliser un programme qui réalise les extractions de ces données.
Il fallait également réaliser une transaction pour gérer de nouvelles données supplémentaires spécifiques à FI.

Il a fallu, quelques mois plus tard, revoir le fonctionnement des deux transactions (extraction et transaction de gestion) car il fallait rendre possible plusieurs travaux simultanés et concurrent sur une même offre. Cette révision fut surtout un travail d’étude et de prévention des risques.

#### Gestion du temps

#### Gestion des risques

### Développement : Extractions de données de commande vers excel

#### Besoin et résumé de la solution

#### Gestion du temps

#### Interaction avec logiciels extérieurs

### Développement orienté objet

### Nouvelle manière de gérer la documentation


Gestion des risques
Prise en charge des demandes
Planification
Métier
Relation avec le client
Documentation
Qualité
Gestion du legacy code
Programmation objet


